{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/davidsantos/Documents/ilercon/Users/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\")[\"default\"];\nrequire(\"core-js/modules/es.object.define-property.js\");\nrequire(\"core-js/modules/es.array.is-array.js\");\nrequire(\"core-js/modules/es.array.push.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = traverse;\nvar _definitions = require(\"../definitions\");\nfunction traverse(node, handlers, state) {\n  if (typeof handlers === \"function\") {\n    handlers = {\n      enter: handlers\n    };\n  }\n  var _handlers = handlers,\n    enter = _handlers.enter,\n    exit = _handlers.exit;\n  traverseSimpleImpl(node, enter, exit, state, []);\n}\nfunction traverseSimpleImpl(node, enter, exit, state, ancestors) {\n  var keys = _definitions.VISITOR_KEYS[node.type];\n  if (!keys) return;\n  if (enter) enter(node, ancestors, state);\n  var _iterator = _createForOfIteratorHelper(keys),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var key = _step.value;\n      var subNode = node[key];\n      if (Array.isArray(subNode)) {\n        for (var i = 0; i < subNode.length; i++) {\n          var child = subNode[i];\n          if (!child) continue;\n          ancestors.push({\n            node: node,\n            key: key,\n            index: i\n          });\n          traverseSimpleImpl(child, enter, exit, state, ancestors);\n          ancestors.pop();\n        }\n      } else if (subNode) {\n        ancestors.push({\n          node: node,\n          key: key\n        });\n        traverseSimpleImpl(subNode, enter, exit, state, ancestors);\n        ancestors.pop();\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  if (exit) exit(node, ancestors, state);\n}","map":{"version":3,"mappings":";;;;;;;;;;AAAA;AA0Be,SAASA,QAAQ,CAC9BC,IAAY,EACZC,QAAoD,EACpDC,KAAS,EACH;EACN,IAAI,OAAOD,QAAQ,KAAK,UAAU,EAAE;IAClCA,QAAQ,GAAG;MAAEE,KAAK,EAAEF;IAAS,CAAC;EAChC;EAEA,gBAAwBA,QAAgC;IAAhDE,KAAK,aAALA,KAAK;IAAEC;EAEfC,kBAAkB,CAACL,IAAI,EAAEG,KAAK,EAAEC,IAAI,EAAEF,KAAK,EAAE,EAAE,CAAC;AAClD;AAEA,SAASG,kBAAkB,CACzBL,IAAS,EACTG,KAA2B,EAC3BC,IAA0B,EAC1BF,KAAoB,EACpBI,SAA6B,EAC7B;EACA,IAAMC,IAAI,GAAGC,yBAAY,CAACR,IAAI,CAACS,IAAI,CAAC;EACpC,IAAI,CAACF,IAAI,EAAE;EAEX,IAAIJ,KAAK,EAAEA,KAAK,CAACH,IAAI,EAAEM,SAAS,EAAEJ,KAAK,CAAC;EAAA,2CAEtBK,IAAI;IAAA;EAAA;IAAtB,oDAAwB;MAAA,IAAbG,GAAG;MACZ,IAAMC,OAAO,GAAGX,IAAI,CAACU,GAAG,CAAC;MAEzB,IAAIE,KAAK,CAACC,OAAO,CAACF,OAAO,CAAC,EAAE;QAC1B,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,OAAO,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;UACvC,IAAME,KAAK,GAAGL,OAAO,CAACG,CAAC,CAAC;UACxB,IAAI,CAACE,KAAK,EAAE;UAEZV,SAAS,CAACW,IAAI,CAAC;YACbjB,IAAI,EAAJA,IAAI;YACJU,GAAG,EAAHA,GAAG;YACHQ,KAAK,EAAEJ;UACT,CAAC,CAAC;UAEFT,kBAAkB,CAACW,KAAK,EAAEb,KAAK,EAAEC,IAAI,EAAEF,KAAK,EAAEI,SAAS,CAAC;UAExDA,SAAS,CAACa,GAAG,EAAE;QACjB;MACF,CAAC,MAAM,IAAIR,OAAO,EAAE;QAClBL,SAAS,CAACW,IAAI,CAAC;UACbjB,IAAI,EAAJA,IAAI;UACJU;QACF,CAAC,CAAC;QAEFL,kBAAkB,CAACM,OAAO,EAAER,KAAK,EAAEC,IAAI,EAAEF,KAAK,EAAEI,SAAS,CAAC;QAE1DA,SAAS,CAACa,GAAG,EAAE;MACjB;IACF;EAAA;IAAA;EAAA;IAAA;EAAA;EAEA,IAAIf,IAAI,EAAEA,IAAI,CAACJ,IAAI,EAAEM,SAAS,EAAEJ,KAAK,CAAC;AACxC","names":["traverse","node","handlers","state","enter","exit","traverseSimpleImpl","ancestors","keys","VISITOR_KEYS","type","key","subNode","Array","isArray","i","length","child","push","index","pop"],"sources":["../../src/traverse/traverse.ts"],"sourcesContent":["import { VISITOR_KEYS } from \"../definitions\";\nimport type * as t from \"..\";\n\nexport type TraversalAncestors = Array<{\n  node: t.Node;\n  key: string;\n  index?: number;\n}>;\n\nexport type TraversalHandler<T> = (\n  this: undefined,\n  node: t.Node,\n  parent: TraversalAncestors,\n  state: T,\n) => void;\n\nexport type TraversalHandlers<T> = {\n  enter?: TraversalHandler<T>;\n  exit?: TraversalHandler<T>;\n};\n\n/**\n * A general AST traversal with both prefix and postfix handlers, and a\n * state object. Exposes ancestry data to each handler so that more complex\n * AST data can be taken into account.\n */\nexport default function traverse<T>(\n  node: t.Node,\n  handlers: TraversalHandler<T> | TraversalHandlers<T>,\n  state?: T,\n): void {\n  if (typeof handlers === \"function\") {\n    handlers = { enter: handlers };\n  }\n\n  const { enter, exit } = handlers as TraversalHandlers<T>;\n\n  traverseSimpleImpl(node, enter, exit, state, []);\n}\n\nfunction traverseSimpleImpl<T>(\n  node: any,\n  enter: Function | undefined,\n  exit: Function | undefined,\n  state: T | undefined,\n  ancestors: TraversalAncestors,\n) {\n  const keys = VISITOR_KEYS[node.type];\n  if (!keys) return;\n\n  if (enter) enter(node, ancestors, state);\n\n  for (const key of keys) {\n    const subNode = node[key];\n\n    if (Array.isArray(subNode)) {\n      for (let i = 0; i < subNode.length; i++) {\n        const child = subNode[i];\n        if (!child) continue;\n\n        ancestors.push({\n          node,\n          key,\n          index: i,\n        });\n\n        traverseSimpleImpl(child, enter, exit, state, ancestors);\n\n        ancestors.pop();\n      }\n    } else if (subNode) {\n      ancestors.push({\n        node,\n        key,\n      });\n\n      traverseSimpleImpl(subNode, enter, exit, state, ancestors);\n\n      ancestors.pop();\n    }\n  }\n\n  if (exit) exit(node, ancestors, state);\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}