{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/davidsantos/Documents/ilercon/Users/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\")[\"default\"];\nrequire(\"core-js/modules/es.object.define-property.js\");\nrequire(\"core-js/modules/es.regexp.exec.js\");\nrequire(\"core-js/modules/es.string.replace.js\");\nrequire(\"core-js/modules/es.string.code-point-at.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = toIdentifier;\nvar _isValidIdentifier = require(\"../validators/isValidIdentifier\");\nvar _helperValidatorIdentifier = require(\"@babel/helper-validator-identifier\");\nfunction toIdentifier(input) {\n  input = input + \"\";\n  var name = \"\";\n  var _iterator = _createForOfIteratorHelper(input),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var c = _step.value;\n      name += (0, _helperValidatorIdentifier.isIdentifierChar)(c.codePointAt(0)) ? c : \"-\";\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  name = name.replace(/^[-0-9]+/, \"\");\n  name = name.replace(/[-\\s]+(.)?/g, function (match, c) {\n    return c ? c.toUpperCase() : \"\";\n  });\n  if (!(0, _isValidIdentifier[\"default\"])(name)) {\n    name = \"_\".concat(name);\n  }\n  return name || \"_\";\n}","map":{"version":3,"mappings":";;;;;;;;;;;AAAA;AACA;AAEe,SAASA,YAAY,CAACC,KAAa,EAAU;EAC1DA,KAAK,GAAGA,KAAK,GAAG,EAAE;EAGlB,IAAIC,IAAI,GAAG,EAAE;EAAA,2CACGD,KAAK;IAAA;EAAA;IAArB,oDAAuB;MAAA,IAAZE,CAAC;MACVD,IAAI,IAAI,+CAAgB,EAACC,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC,CAAC,GAAGD,CAAC,GAAG,GAAG;IACtD;EAAA;IAAA;EAAA;IAAA;EAAA;EAGAD,IAAI,GAAGA,IAAI,CAACG,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;EAGnCH,IAAI,GAAGA,IAAI,CAACG,OAAO,CAAC,aAAa,EAAE,UAAUC,KAAK,EAAEH,CAAC,EAAE;IACrD,OAAOA,CAAC,GAAGA,CAAC,CAACI,WAAW,EAAE,GAAG,EAAE;EACjC,CAAC,CAAC;EAEF,IAAI,CAAC,iCAAiB,EAACL,IAAI,CAAC,EAAE;IAC5BA,IAAI,cAAOA,IAAK,CAAC;EACnB;EAEA,OAAOA,IAAI,IAAI,GAAG;AACpB","names":["toIdentifier","input","name","c","codePointAt","replace","match","toUpperCase"],"sources":["../../src/converters/toIdentifier.ts"],"sourcesContent":["import isValidIdentifier from \"../validators/isValidIdentifier\";\nimport { isIdentifierChar } from \"@babel/helper-validator-identifier\";\n\nexport default function toIdentifier(input: string): string {\n  input = input + \"\";\n\n  // replace all non-valid identifiers with dashes\n  let name = \"\";\n  for (const c of input) {\n    name += isIdentifierChar(c.codePointAt(0)) ? c : \"-\";\n  }\n\n  // remove all dashes and numbers from start of name\n  name = name.replace(/^[-0-9]+/, \"\");\n\n  // camel case\n  name = name.replace(/[-\\s]+(.)?/g, function (match, c) {\n    return c ? c.toUpperCase() : \"\";\n  });\n\n  if (!isValidIdentifier(name)) {\n    name = `_${name}`;\n  }\n\n  return name || \"_\";\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}