{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/davidsantos/Documents/ilercon/Users/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\")[\"default\"];\nvar _toConsumableArray = require(\"/Users/davidsantos/Documents/ilercon/Users/node_modules/@babel/runtime/helpers/toConsumableArray.js\")[\"default\"];\nrequire(\"core-js/modules/es.object.define-property.js\");\nrequire(\"core-js/modules/es.array.concat.js\");\nrequire(\"core-js/modules/es.object.keys.js\");\nrequire(\"core-js/modules/es.symbol.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = removeProperties;\nvar _constants = require(\"../constants\");\nvar CLEAR_KEYS = [\"tokens\", \"start\", \"end\", \"loc\", \"raw\", \"rawValue\"];\nvar CLEAR_KEYS_PLUS_COMMENTS = [].concat(_toConsumableArray(_constants.COMMENT_KEYS), [\"comments\"], CLEAR_KEYS);\nfunction removeProperties(node) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var map = opts.preserveComments ? CLEAR_KEYS : CLEAR_KEYS_PLUS_COMMENTS;\n  var _iterator = _createForOfIteratorHelper(map),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _key = _step.value;\n      if (node[_key] != null) node[_key] = undefined;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  for (var _i = 0, _Object$keys = Object.keys(node); _i < _Object$keys.length; _i++) {\n    var key = _Object$keys[_i];\n    if (key[0] === \"_\" && node[key] != null) node[key] = undefined;\n  }\n  var symbols = Object.getOwnPropertySymbols(node);\n  var _iterator2 = _createForOfIteratorHelper(symbols),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var sym = _step2.value;\n      node[sym] = null;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n}","map":{"version":3,"mappings":";;;;;;;;;;;;AAAA;AAGA,IAAMA,UAAU,GAAG,CACjB,QAAQ,EACR,OAAO,EACP,KAAK,EACL,KAAK,EAEL,KAAK,EACL,UAAU,CACF;AAEV,IAAMC,wBAAwB,gCACzBC,uBAAY,IACf,UAAU,GACPF,UAAU,CACL;AAOK,SAASG,gBAAgB,CACtCC,IAAY,EAEN;EAAA,IADNC,IAAa,uEAAG,CAAC,CAAC;EAElB,IAAMC,GAAG,GAAGD,IAAI,CAACE,gBAAgB,GAAGP,UAAU,GAAGC,wBAAwB;EAAA,2CACvDK,GAAG;IAAA;EAAA;IAArB,oDAAuB;MAAA,IAAZE,IAAG;MAEZ,IAAIJ,IAAI,CAACI,IAAG,CAAC,IAAI,IAAI,EAAEJ,IAAI,CAACI,IAAG,CAAC,GAAGC,SAAS;IAC9C;EAAA;IAAA;EAAA;IAAA;EAAA;EAEA,gCAAkBC,MAAM,CAACC,IAAI,CAACP,IAAI,CAAC,kCAAE;IAAhC,IAAMI,GAAG;IAEZ,IAAIA,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,IAAIJ,IAAI,CAACI,GAAG,CAAC,IAAI,IAAI,EAAEJ,IAAI,CAACI,GAAG,CAAC,GAAGC,SAAS;EAChE;EAEA,IAAMG,OAAsB,GAAGF,MAAM,CAACG,qBAAqB,CAACT,IAAI,CAAC;EAAA,4CAC/CQ,OAAO;IAAA;EAAA;IAAzB,uDAA2B;MAAA,IAAhBE,GAAG;MAEZV,IAAI,CAACU,GAAG,CAAC,GAAG,IAAI;IAClB;EAAA;IAAA;EAAA;IAAA;EAAA;AACF","names":["CLEAR_KEYS","CLEAR_KEYS_PLUS_COMMENTS","COMMENT_KEYS","removeProperties","node","opts","map","preserveComments","key","undefined","Object","keys","symbols","getOwnPropertySymbols","sym"],"sources":["../../src/modifications/removeProperties.ts"],"sourcesContent":["import { COMMENT_KEYS } from \"../constants\";\nimport type * as t from \"..\";\n\nconst CLEAR_KEYS = [\n  \"tokens\", // only exist in t.File\n  \"start\",\n  \"end\",\n  \"loc\",\n  // Fixme: should be extra.raw / extra.rawValue?\n  \"raw\",\n  \"rawValue\",\n] as const;\n\nconst CLEAR_KEYS_PLUS_COMMENTS = [\n  ...COMMENT_KEYS,\n  \"comments\",\n  ...CLEAR_KEYS,\n] as const;\n\nexport type Options = { preserveComments?: boolean };\n/**\n * Remove all of the _* properties from a node along with the additional metadata\n * properties like location data and raw token data.\n */\nexport default function removeProperties(\n  node: t.Node,\n  opts: Options = {},\n): void {\n  const map = opts.preserveComments ? CLEAR_KEYS : CLEAR_KEYS_PLUS_COMMENTS;\n  for (const key of map) {\n    // @ts-expect-error tokens only exist in t.File\n    if (node[key] != null) node[key] = undefined;\n  }\n\n  for (const key of Object.keys(node)) {\n    // @ts-expect-error string can not index node\n    if (key[0] === \"_\" && node[key] != null) node[key] = undefined;\n  }\n\n  const symbols: Array<symbol> = Object.getOwnPropertySymbols(node);\n  for (const sym of symbols) {\n    // @ts-expect-error Fixme: document symbol properties\n    node[sym] = null;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}