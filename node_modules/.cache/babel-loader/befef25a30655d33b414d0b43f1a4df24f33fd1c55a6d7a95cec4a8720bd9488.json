{"ast":null,"code":"'use strict';\n\n/* global WorkerGlobalScope self */\nrequire(\"core-js/modules/web.timers.js\");\nvar _require = require('./log'),\n  log = _require.log;\nfunction reloadApp(_ref, _ref2) {\n  var hotReload = _ref.hotReload,\n    hot = _ref.hot,\n    liveReload = _ref.liveReload;\n  var isUnloading = _ref2.isUnloading,\n    currentHash = _ref2.currentHash;\n  if (isUnloading || !hotReload) {\n    return;\n  }\n  if (hot) {\n    log.info('[WDS] App hot update...');\n    var hotEmitter = require('webpack/hot/emitter');\n    hotEmitter.emit('webpackHotUpdate', currentHash);\n    if (typeof self !== 'undefined' && self.window) {\n      // broadcast update to window\n      self.postMessage(\"webpackHotUpdate\".concat(currentHash), '*');\n    }\n  } // allow refreshing the page only if liveReload isn't disabled\n  else if (liveReload) {\n    var rootWindow = self; // use parent window for reload (in case we're in an iframe with no valid src)\n\n    var intervalId = self.setInterval(function () {\n      if (rootWindow.location.protocol !== 'about:') {\n        // reload immediately if protocol is valid\n        applyReload(rootWindow, intervalId);\n      } else {\n        rootWindow = rootWindow.parent;\n        if (rootWindow.parent === rootWindow) {\n          // if parent equals current window we've reached the root which would continue forever, so trigger a reload anyways\n          applyReload(rootWindow, intervalId);\n        }\n      }\n    });\n  }\n  function applyReload(rootWindow, intervalId) {\n    clearInterval(intervalId);\n    log.info('[WDS] App updated. Reloading...');\n    rootWindow.location.reload();\n  }\n}\nmodule.exports = reloadApp;","map":{"version":3,"names":["_require","require","log","reloadApp","_ref","_ref2","hotReload","hot","liveReload","isUnloading","currentHash","info","hotEmitter","emit","self","window","postMessage","concat","rootWindow","intervalId","setInterval","location","protocol","applyReload","parent","clearInterval","reload","module","exports"],"sources":["/Users/davidsantos/Documents/ilercon/Users/node_modules/webpack-dev-server/client/utils/reloadApp.js"],"sourcesContent":["'use strict';\n/* global WorkerGlobalScope self */\n\nvar _require = require('./log'),\n    log = _require.log;\n\nfunction reloadApp(_ref, _ref2) {\n  var hotReload = _ref.hotReload,\n      hot = _ref.hot,\n      liveReload = _ref.liveReload;\n  var isUnloading = _ref2.isUnloading,\n      currentHash = _ref2.currentHash;\n\n  if (isUnloading || !hotReload) {\n    return;\n  }\n\n  if (hot) {\n    log.info('[WDS] App hot update...');\n\n    var hotEmitter = require('webpack/hot/emitter');\n\n    hotEmitter.emit('webpackHotUpdate', currentHash);\n\n    if (typeof self !== 'undefined' && self.window) {\n      // broadcast update to window\n      self.postMessage(\"webpackHotUpdate\".concat(currentHash), '*');\n    }\n  } // allow refreshing the page only if liveReload isn't disabled\n  else if (liveReload) {\n      var rootWindow = self; // use parent window for reload (in case we're in an iframe with no valid src)\n\n      var intervalId = self.setInterval(function () {\n        if (rootWindow.location.protocol !== 'about:') {\n          // reload immediately if protocol is valid\n          applyReload(rootWindow, intervalId);\n        } else {\n          rootWindow = rootWindow.parent;\n\n          if (rootWindow.parent === rootWindow) {\n            // if parent equals current window we've reached the root which would continue forever, so trigger a reload anyways\n            applyReload(rootWindow, intervalId);\n          }\n        }\n      });\n    }\n\n  function applyReload(rootWindow, intervalId) {\n    clearInterval(intervalId);\n    log.info('[WDS] App updated. Reloading...');\n    rootWindow.location.reload();\n  }\n}\n\nmodule.exports = reloadApp;"],"mappings":"AAAA,YAAY;;AACZ;AAAA;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,OAAO,CAAC;EAC3BC,GAAG,GAAGF,QAAQ,CAACE,GAAG;AAEtB,SAASC,SAAS,CAACC,IAAI,EAAEC,KAAK,EAAE;EAC9B,IAAIC,SAAS,GAAGF,IAAI,CAACE,SAAS;IAC1BC,GAAG,GAAGH,IAAI,CAACG,GAAG;IACdC,UAAU,GAAGJ,IAAI,CAACI,UAAU;EAChC,IAAIC,WAAW,GAAGJ,KAAK,CAACI,WAAW;IAC/BC,WAAW,GAAGL,KAAK,CAACK,WAAW;EAEnC,IAAID,WAAW,IAAI,CAACH,SAAS,EAAE;IAC7B;EACF;EAEA,IAAIC,GAAG,EAAE;IACPL,GAAG,CAACS,IAAI,CAAC,yBAAyB,CAAC;IAEnC,IAAIC,UAAU,GAAGX,OAAO,CAAC,qBAAqB,CAAC;IAE/CW,UAAU,CAACC,IAAI,CAAC,kBAAkB,EAAEH,WAAW,CAAC;IAEhD,IAAI,OAAOI,IAAI,KAAK,WAAW,IAAIA,IAAI,CAACC,MAAM,EAAE;MAC9C;MACAD,IAAI,CAACE,WAAW,CAAC,kBAAkB,CAACC,MAAM,CAACP,WAAW,CAAC,EAAE,GAAG,CAAC;IAC/D;EACF,CAAC,CAAC;EAAA,KACG,IAAIF,UAAU,EAAE;IACjB,IAAIU,UAAU,GAAGJ,IAAI,CAAC,CAAC;;IAEvB,IAAIK,UAAU,GAAGL,IAAI,CAACM,WAAW,CAAC,YAAY;MAC5C,IAAIF,UAAU,CAACG,QAAQ,CAACC,QAAQ,KAAK,QAAQ,EAAE;QAC7C;QACAC,WAAW,CAACL,UAAU,EAAEC,UAAU,CAAC;MACrC,CAAC,MAAM;QACLD,UAAU,GAAGA,UAAU,CAACM,MAAM;QAE9B,IAAIN,UAAU,CAACM,MAAM,KAAKN,UAAU,EAAE;UACpC;UACAK,WAAW,CAACL,UAAU,EAAEC,UAAU,CAAC;QACrC;MACF;IACF,CAAC,CAAC;EACJ;EAEF,SAASI,WAAW,CAACL,UAAU,EAAEC,UAAU,EAAE;IAC3CM,aAAa,CAACN,UAAU,CAAC;IACzBjB,GAAG,CAACS,IAAI,CAAC,iCAAiC,CAAC;IAC3CO,UAAU,CAACG,QAAQ,CAACK,MAAM,EAAE;EAC9B;AACF;AAEAC,MAAM,CAACC,OAAO,GAAGzB,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}