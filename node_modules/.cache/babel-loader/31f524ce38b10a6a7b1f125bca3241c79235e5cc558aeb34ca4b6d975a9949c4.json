{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/davidsantos/Documents/ilercon/Users/node_modules/@babel/runtime/helpers/slicedToArray.js\")[\"default\"];\nvar _createForOfIteratorHelper = require(\"/Users/davidsantos/Documents/ilercon/Users/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\")[\"default\"];\nvar _toConsumableArray = require(\"/Users/davidsantos/Documents/ilercon/Users/node_modules/@babel/runtime/helpers/toConsumableArray.js\")[\"default\"];\nrequire(\"core-js/modules/es.object.define-property.js\");\nrequire(\"core-js/modules/es.function.name.js\");\nrequire(\"core-js/modules/es.array.concat.js\");\nrequire(\"core-js/modules/es.map.js\");\nrequire(\"core-js/modules/es.object.to-string.js\");\nrequire(\"core-js/modules/es.string.iterator.js\");\nrequire(\"core-js/modules/web.dom-collections.iterator.js\");\nrequire(\"core-js/modules/es.set.js\");\nrequire(\"core-js/modules/es.array.index-of.js\");\nrequire(\"core-js/modules/es.array.push.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = removeTypeDuplicates;\nvar _generated = require(\"../../validators/generated\");\nfunction getQualifiedName(node) {\n  return (0, _generated.isIdentifier)(node) ? node.name : \"\".concat(node.right.name, \".\").concat(getQualifiedName(node.left));\n}\nfunction removeTypeDuplicates(nodes) {\n  var generics = new Map();\n  var bases = new Map();\n  var typeGroups = new Set();\n  var types = [];\n  for (var i = 0; i < nodes.length; i++) {\n    var node = nodes[i];\n    if (!node) continue;\n    if (types.indexOf(node) >= 0) {\n      continue;\n    }\n    if ((0, _generated.isTSAnyKeyword)(node)) {\n      return [node];\n    }\n    if ((0, _generated.isTSBaseType)(node)) {\n      bases.set(node.type, node);\n      continue;\n    }\n    if ((0, _generated.isTSUnionType)(node)) {\n      if (!typeGroups.has(node.types)) {\n        nodes.push.apply(nodes, _toConsumableArray(node.types));\n        typeGroups.add(node.types);\n      }\n      continue;\n    }\n    if ((0, _generated.isTSTypeReference)(node) && node.typeParameters) {\n      var name = getQualifiedName(node.typeName);\n      if (generics.has(name)) {\n        var existing = generics.get(name);\n        if (existing.typeParameters) {\n          if (node.typeParameters) {\n            existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params.concat(node.typeParameters.params));\n          }\n        } else {\n          existing = node.typeParameters;\n        }\n      } else {\n        generics.set(name, node);\n      }\n      continue;\n    }\n    types.push(node);\n  }\n  var _iterator = _createForOfIteratorHelper(bases),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _slicedToArray(_step.value, 2),\n        baseType = _step$value[1];\n      types.push(baseType);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var _iterator2 = _createForOfIteratorHelper(generics),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _step2$value = _slicedToArray(_step2.value, 2),\n        genericName = _step2$value[1];\n      types.push(genericName);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return types;\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AASA,SAASA,gBAAgB,CAACC,IAAmC,EAAU;EACrE,OAAO,2BAAY,EAACA,IAAI,CAAC,GACrBA,IAAI,CAACC,IAAI,aACND,IAAI,CAACE,KAAK,CAACD,IAAK,cAAGF,gBAAgB,CAACC,IAAI,CAACG,IAAI,CAAE,CAAC;AACzD;AAKe,SAASC,oBAAoB,CAC1CC,KAAsB,EACL;EACjB,IAAMC,QAAQ,GAAG,IAAIC,GAAG,EAA6B;EACrD,IAAMC,KAAK,GAAG,IAAID,GAAG,EAAsC;EAG3D,IAAME,UAAU,GAAG,IAAIC,GAAG,EAAc;EAExC,IAAMC,KAAiB,GAAG,EAAE;EAE5B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,KAAK,CAACQ,MAAM,EAAED,CAAC,EAAE,EAAE;IACrC,IAAMZ,IAAI,GAAGK,KAAK,CAACO,CAAC,CAAC;IACrB,IAAI,CAACZ,IAAI,EAAE;IAGX,IAAIW,KAAK,CAACG,OAAO,CAACd,IAAI,CAAC,IAAI,CAAC,EAAE;MAC5B;IACF;IAGA,IAAI,6BAAc,EAACA,IAAI,CAAC,EAAE;MACxB,OAAO,CAACA,IAAI,CAAC;IACf;IAGA,IAAI,2BAAY,EAACA,IAAI,CAAC,EAAE;MACtBQ,KAAK,CAACO,GAAG,CAACf,IAAI,CAACgB,IAAI,EAAEhB,IAAI,CAAC;MAC1B;IACF;IAEA,IAAI,4BAAa,EAACA,IAAI,CAAC,EAAE;MACvB,IAAI,CAACS,UAAU,CAACQ,GAAG,CAACjB,IAAI,CAACW,KAAK,CAAC,EAAE;QAC/BN,KAAK,CAACa,IAAI,OAAVb,KAAK,qBAASL,IAAI,CAACW,KAAK,EAAC;QACzBF,UAAU,CAACU,GAAG,CAACnB,IAAI,CAACW,KAAK,CAAC;MAC5B;MACA;IACF;IAGA,IAAI,gCAAiB,EAACX,IAAI,CAAC,IAAIA,IAAI,CAACoB,cAAc,EAAE;MAClD,IAAMnB,IAAI,GAAGF,gBAAgB,CAACC,IAAI,CAACqB,QAAQ,CAAC;MAE5C,IAAIf,QAAQ,CAACW,GAAG,CAAChB,IAAI,CAAC,EAAE;QACtB,IAAIqB,QAAsB,GAAGhB,QAAQ,CAACiB,GAAG,CAACtB,IAAI,CAAC;QAC/C,IAAIqB,QAAQ,CAACF,cAAc,EAAE;UAC3B,IAAIpB,IAAI,CAACoB,cAAc,EAAE;YACvBE,QAAQ,CAACF,cAAc,CAACI,MAAM,GAAGpB,oBAAoB,CACnDkB,QAAQ,CAACF,cAAc,CAACI,MAAM,CAACC,MAAM,CAACzB,IAAI,CAACoB,cAAc,CAACI,MAAM,CAAC,CAClE;UACH;QACF,CAAC,MAAM;UACLF,QAAQ,GAAGtB,IAAI,CAACoB,cAAc;QAChC;MACF,CAAC,MAAM;QACLd,QAAQ,CAACS,GAAG,CAACd,IAAI,EAAED,IAAI,CAAC;MAC1B;MAEA;IACF;IAEAW,KAAK,CAACO,IAAI,CAAClB,IAAI,CAAC;EAClB;EAAA,2CAG2BQ,KAAK;IAAA;EAAA;IAAhC,oDAAkC;MAAA;QAApBkB,QAAQ;MACpBf,KAAK,CAACO,IAAI,CAACQ,QAAQ,CAAC;IACtB;EAAA;IAAA;EAAA;IAAA;EAAA;EAAA,4CAG8BpB,QAAQ;IAAA;EAAA;IAAtC,uDAAwC;MAAA;QAA1BqB,WAAW;MACvBhB,KAAK,CAACO,IAAI,CAACS,WAAW,CAAC;IACzB;EAAA;IAAA;EAAA;IAAA;EAAA;EAEA,OAAOhB,KAAK;AACd","names":["getQualifiedName","node","name","right","left","removeTypeDuplicates","nodes","generics","Map","bases","typeGroups","Set","types","i","length","indexOf","set","type","has","push","add","typeParameters","typeName","existing","get","params","concat","baseType","genericName"],"sources":["../../../src/modifications/typescript/removeTypeDuplicates.ts"],"sourcesContent":["import {\n  isIdentifier,\n  isTSAnyKeyword,\n  isTSTypeReference,\n  isTSUnionType,\n  isTSBaseType,\n} from \"../../validators/generated\";\nimport type * as t from \"../..\";\n\nfunction getQualifiedName(node: t.TSTypeReference[\"typeName\"]): string {\n  return isIdentifier(node)\n    ? node.name\n    : `${node.right.name}.${getQualifiedName(node.left)}`;\n}\n\n/**\n * Dedupe type annotations.\n */\nexport default function removeTypeDuplicates(\n  nodes: Array<t.TSType>,\n): Array<t.TSType> {\n  const generics = new Map<string, t.TSTypeReference>();\n  const bases = new Map<t.TSBaseType[\"type\"], t.TSBaseType>();\n\n  // store union type groups to circular references\n  const typeGroups = new Set<t.TSType[]>();\n\n  const types: t.TSType[] = [];\n\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    if (!node) continue;\n\n    // detect duplicates\n    if (types.indexOf(node) >= 0) {\n      continue;\n    }\n\n    // this type matches anything\n    if (isTSAnyKeyword(node)) {\n      return [node];\n    }\n\n    // Analogue of FlowBaseAnnotation\n    if (isTSBaseType(node)) {\n      bases.set(node.type, node);\n      continue;\n    }\n\n    if (isTSUnionType(node)) {\n      if (!typeGroups.has(node.types)) {\n        nodes.push(...node.types);\n        typeGroups.add(node.types);\n      }\n      continue;\n    }\n\n    // todo: support merging tuples: number[]\n    if (isTSTypeReference(node) && node.typeParameters) {\n      const name = getQualifiedName(node.typeName);\n\n      if (generics.has(name)) {\n        let existing: t.TypeScript = generics.get(name);\n        if (existing.typeParameters) {\n          if (node.typeParameters) {\n            existing.typeParameters.params = removeTypeDuplicates(\n              existing.typeParameters.params.concat(node.typeParameters.params),\n            );\n          }\n        } else {\n          existing = node.typeParameters;\n        }\n      } else {\n        generics.set(name, node);\n      }\n\n      continue;\n    }\n\n    types.push(node);\n  }\n\n  // add back in bases\n  for (const [, baseType] of bases) {\n    types.push(baseType);\n  }\n\n  // add back in generics\n  for (const [, genericName] of generics) {\n    types.push(genericName);\n  }\n\n  return types;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}